package org.isfpp.test;


// Generated by Qodo Gen

import org.isfpp.logica.Utils;
import org.isfpp.modelo.*;
import org.jgrapht.graph.SimpleGraph;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;


public class DetectconnectivityissuesTest {
    private Utils utils;
    private SimpleGraph<Equipment, Connection> graph;
    private Equipment startNode;
    private Equipment connectedNode1;
    private Equipment connectedNode2;


    // Returns a list of all connected Equipment nodes starting from the given startNode
    @BeforeEach
    public void setUp() {
        // Setup
        EquipmentType equipmentType = new EquipmentType("2231", "pc");

        PortType portType1 = new PortType("P1", "Ethernet Port", 1000); // 1 Gbps
        WireType wireType = new WireType("c1", "cable1", 12);
        startNode = new Equipment("E1", "Router", "Cisco", "XYZ", portType1, 4, equipmentType, new Location("123", "Room 101"), true);
        connectedNode1 = new Equipment("E2", "Switch", "HP", "ABC", portType1, 8, equipmentType, new Location("100", "Room 102"), true);
        connectedNode2 = new Equipment("E3", "PC", "Dell", "123",  portType1, 2,  equipmentType, new Location("143","Room 103"), true);


        Connection connection1 = new Connection(startNode.getPorts().get(0), connectedNode1.getPorts().get(0), wireType);
        Connection connection2 = new Connection(connectedNode1.getPorts().get(1), connectedNode2.getPorts().get(0), wireType);

        graph = new SimpleGraph<>(Connection.class);
        graph.addVertex(startNode);
        graph.addVertex(connectedNode1);
        graph.addVertex(connectedNode2);
        graph.addEdge(startNode, connectedNode1, connection1);
        graph.addEdge(connectedNode1, connectedNode2, connection2);

    }

    // Handles a null startNode gracefully without throwing unexpected exceptions
    @Test
    public void test_null_start_node() {
        // Setup
        Utils utils = new Utils();
        utils.setGraph(graph);
        utils.setGraph(new SimpleGraph<>(Connection.class));

        // Execute & Verify
        assertDoesNotThrow(() -> {
            List<Equipment> result = utils.detectConnectivityIssues(null);
            assertTrue(result.isEmpty());
        });
    }

@Test
public void test_connected_nodes_from_start_node() {
    // Ejecutar
    Utils utils = new Utils();
    utils.setGraph(graph);
    List<Equipment> result = utils.detectConnectivityIssues(startNode);

    // Verificar
    assertEquals(3, result.size());
    assertTrue(result.contains(startNode));
    assertTrue(result.contains(connectedNode1));
    assertTrue(result.contains(connectedNode2));
}
@Test
    public void test_create_inactive_equipment() {
        // Crear equipo inactivo
        EquipmentType equipmentType = new EquipmentType("2231", "pc");
        PortType portType1 = new PortType("P1", "Ethernet Port", 1000);
        Equipment inactiveEquipment = new Equipment("E99", "Switch Inactivo", "HP", "Model123", portType1, 8, equipmentType, new Location("321", "Room 202"), false);
        graph.addVertex(inactiveEquipment);
        Utils u=new Utils();
        u.setGraph(graph);
        List<Equipment> result=u.detectConnectivityIssues(inactiveEquipment);
        assertTrue(result.contains(inactiveEquipment));
        assertEquals(1,result.size());
    List<Equipment> result1=u.detectConnectivityIssues(startNode);
    assertEquals(3, result1.size());
    assertTrue(result1.contains(startNode));
    assertTrue(result1.contains(connectedNode1));
    assertTrue(result1.contains(connectedNode2));
    }
}